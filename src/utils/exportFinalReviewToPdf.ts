import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import '@/fonts/Roboto-Medium'; // –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–∫ 'RobotoMedium'

type BmzData = {
  length?: number;
  width?: number;
  height?: number;
  thickness?: number;
  heatedFloor?: boolean;
  lighting?: boolean;
  fireAlarm?: boolean;
};

type TransformerData = {
  spec: string;
  price: number;
  quantity: number;
};

type RusnData = {
  selectedCellTypes: string[];
  breaker?: string;
  rza?: string;
  cells: Record<string, number>;
};

type BktpData = {
  client?: string;
  executor?: string;
  date?: string;
  taskNumber?: string;
};

export function exportFinalReviewToPdf(
  bmz: BmzData,
  transformer: TransformerData | null,
  rusn: RusnData,
  bktp: BktpData
) {
  const doc = new jsPDF();
  doc.setFont('RobotoMedium');

  const area = Math.round(((Number(bmz.length) * Number(bmz.width)) / 1_000_000) * 100) / 100;

  const rows: (string | number)[][] = [
    [
      `–ë–ú–ó ${bmz.length}x${bmz.width}x${bmz.height} –º–º, ${bmz.thickness || '‚Äî'} –º–º`,
      '–º2',
      area,
      0,
      0,
    ],
  ];

  if (bmz.heatedFloor) rows.push(['–£—Ç–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ–ª', '–º2', area, 7500, area * 7500]);
  if (bmz.lighting) rows.push(['–û—Å–≤–µ—â–µ–Ω–∏–µ', '–º2', area, 5000, area * 5000]);
  if (bmz.fireAlarm) rows.push(['–û—Ö—Ä–∞–Ω–Ω–æ-–ø–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '–º2', area, 0, 0]);

  if (transformer) {
    rows.push(['', '', '', '', '']);
    rows.push(['–°–∏–ª–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä', '', '', '', '']);
    rows.push([
      transformer.spec,
      '—à—Ç',
      transformer.quantity,
      transformer.price,
      transformer.price * transformer.quantity,
    ]);
  }

  rows.push(['', '', '', '', '']);
  rows.push([
    '–†–£-' + (rusn.selectedCellTypes[0]?.includes('20') ? '20' : '10') + '–∫–í',
    '',
    '',
    '',
    '',
  ]);
  rows.push([
    `${rusn.selectedCellTypes[0] || '‚Äî'} / ${rusn.breaker || '‚Äî'} / ${rusn.rza || '‚Äî'}`,
    '—à—Ç',
    Object.values(rusn.cells).reduce((a, b) => a + b, 0),
    3200000,
    7000000,
  ]);

  const total = rows.reduce((sum, r) => sum + (typeof r[4] === 'number' ? Number(r[4]) : 0), 0);
  rows.push(['', '', '', '', '']);
  rows.push(['–ò–¢–û–ì–û', '', '', '', total]);

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  doc.setFontSize(16);
  doc.text('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', 14, 15);

  doc.setFontSize(11);
  doc.text(`–û–±—ä–µ–∫—Ç: ${bktp.client || '‚Äî'}`, 14, 23);
  doc.text(`–£—Ç–≤–µ—Ä–∂–¥–∞—é: ${bktp.executor || '‚Äî'}`, 14, 29);
  doc.text(`–î–∞—Ç–∞: ${bktp.date || '‚Äî'}`, 14, 35);
  doc.text(`–†–ê–°–ß–Å–¢ ‚Ññ${bktp.taskNumber || '000-000'}`, 100, 35);

  // üîµ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é
  const headers = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ï–¥. –∏–∑–º.', '–ö–æ–ª-–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞'];
  const columnWidths = [50, 30, 30, 30, 30];
  const startX = 14;
  const startY = 42;
  const rowHeight = 8;

  let x = startX;
  doc.setFont('RobotoMedium');
  doc.setFontSize(11);
  doc.setFillColor(58, 85, 223);
  doc.setTextColor(255);
  for (let i = 0; i < headers.length; i++) {
    doc.rect(x, startY, columnWidths[i], rowHeight, 'F'); // –ó–∞–ª–∏–≤–∫–∞ —è—á–µ–µ–∫
    doc.text(headers[i], x + 2, startY + 5, { maxWidth: columnWidths[i] - 4 }); // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å

    x += columnWidths[i];
  }

  // üü¢ –¢–∞–±–ª–∏—Ü–∞
  autoTable(doc, {
    body: rows,
    startY: startY + rowHeight + 2,
    styles: {
      font: 'RobotoMedium',
      fontSize: 10,
      textColor: 20,
    },
    theme: 'grid',
    columnStyles: {
      0: { cellWidth: columnWidths[0] },
      1: { cellWidth: columnWidths[1] },
      2: { cellWidth: columnWidths[2] },
      3: { cellWidth: columnWidths[3] },
      4: { cellWidth: columnWidths[4] },
    },
    margin: { left: startX },
  });

  doc.save('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.pdf');
}
