'use client';

import { useState, useEffect } from 'react';
import { useRunnStore } from '@/store/useRunnStore';
import { useRunnSettings } from '@/hooks/useRunnSettings';
import { getMaterialsByCategoryId, Material } from '@/api/material';
import { getAllCategories } from '@/api/categories';
import { useAutoMaterialSelection } from '@/hooks/useAutoMaterialSelection';
import RunnGlobalConfig from './RunnGlobalConfig';
import RunnCellTable from './RunnCellTable';
import { RunnBusbarSystem } from '@/components/runn/RunnBusbarSystem';
import { RunnBusBridge } from '@/components/runn/RunnBusBridge';
import { RunnConfigTabs } from '@/components/runn/RunnConfigTabs';

type TabType = 'global' | 'cells' | 'bus-bridge';

export default function RunnFormFields() {
  const { global } = useRunnStore();
  const { selectedCategories } = useRunnSettings();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const [materials, setMaterials] = useState<Material[]>([]);
  const [materialsLoading, setMaterialsLoading] = useState(false);
  const [meterMaterials, setMeterMaterials] = useState<Material[]>([]);
  const [meterMaterialsLoading, setMeterMaterialsLoading] = useState(false);
  const [rpsLeftMaterials, setRpsLeftMaterials] = useState<Material[]>([]);
  const [rpsLeftMaterialsLoading, setRpsLeftMaterialsLoading] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  const {
    autoSelectedMaterial,
    autoSelectedSvMaterial,
    transformerPower,
    recommendedCurrent,
    recommendedSvCurrent,
  } = useAutoMaterialSelection({
    categoryMaterials: materials,
    categoryName: global.withdrawableBreaker || '',
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ localStorage
  const [activeTab, setActiveTab] = useState<TabType>(() => {
    if (typeof window !== 'undefined') {
      const savedTab = localStorage.getItem('runn-active-tab') as TabType;
      return savedTab || 'global';
    }
    return 'global';
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const fetchMaterialsByCategory = async (categoryName: string) => {
    if (!categoryName || !selectedCategories) {
      setMaterials([]);
      return;
    }

    setMaterialsLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const category = selectedCategories.avtomatVyk?.find((cat) => cat.name === categoryName);
      if (!category) {
        setMaterials([]);
        return;
      }

      const materialsData = await getMaterialsByCategoryId(parseInt(category.id), token);
      setMaterials(materialsData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
      setMaterials([]);
    } finally {
      setMaterialsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—á–µ—Ç—á–∏–∫–∞
  const fetchMeterMaterialsByCategory = async (categoryName: string) => {
    if (!categoryName || !selectedCategories) {
      setMeterMaterials([]);
      return;
    }

    setMeterMaterialsLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const category = selectedCategories.counter?.find((cat) => cat.name === categoryName);
      if (!category) {
        setMeterMaterials([]);
        return;
      }

      const materialsData = await getMaterialsByCategoryId(parseInt(category.id), token);
      setMeterMaterials(materialsData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—á–µ—Ç—á–∏–∫–∞:', error);
      setMeterMaterials([]);
    } finally {
      setMeterMaterialsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –†–ü–° –ª–µ–≤—ã–π
  const fetchRpsLeftMaterials = async () => {
    setRpsLeftMaterialsLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      console.log('üîç –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–†–ü–° –ª–µ–≤—ã–π" —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const allCategories = await getAllCategories(token);
      console.log('üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:', allCategories.map(cat => `${cat.id}: ${cat.name}`));
      
      // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–†–ü–° –ª–µ–≤—ã–π"
      const rpsLeftCategory = allCategories.find(cat => 
        cat.name.toLowerCase().includes('—Ä–ø—Å') && cat.name.toLowerCase().includes('–ª–µ–≤')
      );
      
      if (!rpsLeftCategory) {
        console.error('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–ü–° –ª–µ–≤—ã–π" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ');
        console.log('üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', allCategories.map(cat => cat.name));
        setRpsLeftMaterials([]);
        return;
      }

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –†–ü–° –ª–µ–≤—ã–π:', rpsLeftCategory);
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:', rpsLeftCategory.id);
      
      const materialsData = await getMaterialsByCategoryId(rpsLeftCategory.id, token);
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –†–ü–° –ª–µ–≤—ã–π:', materialsData);
      setRpsLeftMaterials(materialsData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –†–ü–° –ª–µ–≤—ã–π:', error);
      setRpsLeftMaterials([]);
    } finally {
      setRpsLeftMaterialsLoading(false);
    }
  };

  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∞ –≤—ã–∫–∞—Ç–Ω–æ–≥–æ
  useEffect(() => {
    if (global.withdrawableBreaker && selectedCategories) {
      fetchMaterialsByCategory(global.withdrawableBreaker);
    } else {
      setMaterials([]);
    }
  }, [global.withdrawableBreaker, selectedCategories]);

  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞
  useEffect(() => {
    if (global.meterType && selectedCategories) {
      fetchMeterMaterialsByCategory(global.meterType);
    } else {
      setMeterMaterials([]);
    }
  }, [global.meterType, selectedCategories]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –†–ü–° –ª–µ–≤—ã–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîç RunnFormFields: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –†–ü–° –ª–µ–≤—ã–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    fetchRpsLeftMaterials();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  const handleTabChange = (tab: TabType) => {
    setActiveTab(tab);
    if (typeof window !== 'undefined') {
      localStorage.setItem('runn-active-tab', tab);
    }
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'global':
        return (
          <RunnGlobalConfig
            materials={materials}
            autoSelectedMaterial={autoSelectedMaterial}
            autoSelectedSvMaterial={autoSelectedSvMaterial}
            transformerPower={transformerPower}
            recommendedCurrent={recommendedCurrent}
            recommendedSvCurrent={recommendedSvCurrent}
          />
        );
      case 'cells':
        return (
          <RunnCellTable
            categoryMaterials={materials}
            autoSelectedMaterial={autoSelectedMaterial}
            autoSelectedSvMaterial={autoSelectedSvMaterial}
            meterMaterials={meterMaterials}
            meterMaterialsLoading={meterMaterialsLoading}
            rpsLeftMaterials={rpsLeftMaterials}
          />
        );
      case 'bus-bridge':
        return (
          <div className="space-y-8">
            <RunnBusbarSystem />
            <RunnBusBridge />
          </div>
        );
      default:
        return (
          <RunnGlobalConfig
            materials={materials}
            autoSelectedMaterial={autoSelectedMaterial}
            autoSelectedSvMaterial={autoSelectedSvMaterial}
            transformerPower={transformerPower}
            recommendedCurrent={recommendedCurrent}
            recommendedSvCurrent={recommendedSvCurrent}
          />
        );
    }
  };

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –†–ü–°
  console.log('üîß RunnFormFields —Å–æ—Å—Ç–æ—è–Ω–∏–µ RPS –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', {
    rpsLeftMaterials: rpsLeftMaterials.length,
    rpsLeftMaterialsLoading,
    selectedCategories: selectedCategories?.rpsLeft?.length || 0
  });

  return (
    <div className="space-y-6">
      {/* Tabs Navigation */}
      <RunnConfigTabs activeTab={activeTab} onTabChange={handleTabChange} />

      {/* Tab Content */}
      <div className="pt-4">{renderTabContent()}</div>
    </div>
  );
}
